package com.softtek.runner;


import java.time.LocalDate;
import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.softtek.entity.Order;
import com.softtek.entity.Product;
import com.softtek.repo.ProductRepo;
import com.softtek.service.ShoppingService;

@Component
public class TestRunner implements CommandLineRunner {
	@Autowired
	private ShoppingService service;
	
	@Autowired
	private ProductRepo pRepo;

	@Override
	public void run(String... args) throws Exception {

		System.out.println("=========");

		System.out.println("=====Question 1====");
		List<Product> listOfProduct1 = service.listOfProduct();
		System.out.println(listOfProduct1);
	 listOfProduct1.stream()
				.filter(ls -> ls.getCategory().equalsIgnoreCase("books") && ls.getPrice() > 100)
				.collect(Collectors.toList()).forEach(c-> System.out.println(c));
		

		System.out.println("=====Question 2====");
//		List<Order> listOfOrders = service.listOfOrders();
//		List<Order> collect2 = listOfOrders.stream().map(ls->new Product(ls.getProducts());
//
//  	get(0).getcategory().equalsIgnoreCase("baby")).collect(Collectors.toList());
//		collect2.stream().forEach((c)-> 
//		System.out.println(c));

		System.out.println("=====Question 3====");
		List<Product> listOfProduct2 = service.listOfProduct();
		List<Product> collect2 = listOfProduct2.stream().filter(l -> l.getCategory().equalsIgnoreCase("Toys"))
				.map(p -> {
					p.setPrice(p.getPrice() - (p.getPrice() * 0.10));
					return p;
				}).collect(Collectors.toList());
		collect2.forEach(p -> System.out.println(p.toString()));

		System.out.println("=====Question 4====");
		List<Order> listOfOrders4 = service.listOfOrders();
		List<Order> collect4 = listOfOrders4.stream().filter(c -> c.getCustomer().getTier() == 2
				&& c.getOrderDate().isAfter(LocalDate.of(2021,02,01))
				&& c.getDeliveryDate().isBefore(LocalDate.of(2021, 04, 01))).collect(Collectors.toList());
		System.out.println(collect4);
		

		System.out.println("=====Question 5====");
		List<Product> listOfProduct3 = service.listOfProduct();
		Optional<Product> filter = listOfProduct3.stream().filter(p -> p.getCategory().equalsIgnoreCase("Books"))
				.min(Comparator.comparing(Product::getPrice));
		System.out.println(filter);

		System.out.println("=====Question 6====");
		List<Order> listOfOrders2 = service.listOfOrders();
		List<Order> collect3 = listOfOrders2.stream().sorted(Comparator.comparing(Order::getOrderDate).reversed())
				.limit(3).collect(Collectors.toList());
		collect3.forEach((p) -> {
			System.out.println(p.toString());
		});

		System.out.println("=====Question 7====");
		
		
		
		System.out.println("=====Question 8====");
		System.out.println("=====Question 9====");
		System.out.println("=====Question 10====");
		List<Product> listOfProduct10 = service.listOfProduct();
		DoubleSummaryStatistics stat = listOfProduct10.stream().filter(ls -> ls.getCategory().equalsIgnoreCase("book"))
				.mapToDouble(x -> x.getPrice()).summaryStatistics();
		System.out.println("Sum : " + stat.getSum());
		System.out.println("Avg : " + stat.getAverage());
		System.out.println("Max : " + stat.getMax());
		System.out.println("Min : " + stat.getMin());
		System.out.println("Count : " + stat.getCount());

		System.out.println("=====Question 11=======");
	}

}
